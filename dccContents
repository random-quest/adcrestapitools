#!/bin/zsh
# https://docs.atlassian.com/ConfluenceServer/rest/8.2.2/#api/content-getContent
if read -t 0; then
  while read -t 20 -u 0 line; do
    dc_STDIN+=("$line")
  done
fi

source dc_lib `basename $0`
typeset -A commandUsages
commandUsages+=([count]="Count the number of pages. Usage:\n$dc_command %s [-v] [--spaceKey <spaceKey n>] [--type <type>] [--status <status>]\n")
commandUsages+=([json]="Retrieve data in json format. Usage:\n$dc_command %s [-v] [--spaceKey <spaceKey n>] [--type <type>]\n")
commandUsages+=([csv]="Retrieve data in csv format. Usage:\n$dc_command %s [-v] [--spaceKey <spaceKey n>] [--type <type>] [--column <key>0...3]\n\tavailable keys: $(printf "(%s)" ${(kj: | :)dcc_CONTENT_AVAILABLE_KEYS})\n")
commandUsages+=([create]="Create page. [STDIN storage format]. Usage:\n$ac_command %s [-v] --title <\"title text\"> --spaceKey <spaceKey> --parentPageId <pageId> [--status <status>]\n")
commandUsages+=([get]="Get page storage content. Usage:\n$ac_command %s [-v] --pageId <pageId>\n")
commandUsages+=([showurl]="Show URL of page. Usage:\n$ac_command %s --pageId <pageId>\n")
commandUsages+=([delete]="Delete pages. [STDIN pageId]. Usage:\n$ac_command %s [-v] --pageId <pageId n> [--status <status>] [--version <version>]\n")

function ac_Print_Help() {
  printf "\nHelp for %s commands:\n\n" $dc_command
  for command commandUsage in ${(kv)commandUsages}; do
    printf "%s - " $command
    printf "${commandUsage}\n" ${command}
  done
  tabs -15
  printf "Options:\n"
  printf "  --type\t(%s) [default: all].\n" ${(kj: | :)dcc_CONTENT_TYPE}
  printf "  --status\t(%s) [default: current].\n" ${(kj: | :)dcc_CONTENT_STATUS}
  printf "\n%s usage examples:\n" $dc_command
  tabs -5
  printf "  o) select by a name\n"
  printf "\t%s json | jq 'select(.name==\"name\")'\n" $dc_command
  printf "  o) count elements\n"
  printf "\t%s json | jq -s '[.][] | length'\n" $dc_command
  printf "\n"
  tabs -8
}

typeset -A lookup_Array_Id_Name
typeset -A option_Array_Id_Name

function populate_option_Array_Id_Name() {
  if [ ${#lookup_Array_Id_Name[@]} -eq 0 ]; then
    # initialize array of spaces only once
    lookup_Array_Id_Name=(`dccSpaces csv | sed "s/[\"'<>()&/]//g" | sed "s/ /_/g" | awk -F ',' '{print $2 " " $3}' | tail -n +2`)
  fi
  if [ ! -z ${lookup_Array_Id_Name[$1]} ]; then
    option_Array_Id_Name+=([$1]=${(v)lookup_Array_Id_Name[$1]})
  else
    printf "\n%s:\tid %s not valid.\n" ${subCommand} $1
    exit
  fi
}

if [[ ${1:l} == "count" || ${1:l} == "json" || ${1:l} == "csv" ]]; then
  typeset subCommand=${1:l}
  shift
  typeset -a option_type=("--type" "all")
  typeset -a option_status=("--status" "current")
  zmodload zsh/zutil
  zparseopts -D -F -K {v,-verbose}=flag_verbose -column+:=option_column -type:=option_type -status:=option_status -spaceKey+:=option_id
  if [ $? -gt 0 ]; then
    printf ${commandUsages[${subCommand}]} ${(k)commandUsages[${subCommand}]}
    exit
  fi
  # populate id name array
  for opt id in $option_id; do
    populate_option_Array_Id_Name $id
  done
  # also check STDIN
  if [ -v dc_STDIN ]; then
    for id in $dc_STDIN; do
      populate_option_Array_Id_Name $id
    done
  fi
  # emtpy option means work all spaces
  if [ ! -v option_Array_Id_Name ]; then
    typeset -A option_Array_Id_Name=(`dccSpaces csv | sed "s/[\"'<>()&/]//g" | sed "s/ /_/g" | awk -F ',' '{print $2 " " $3}' | tail -n +2`)
  fi
   # validate options_type options_column
  if [ -z  ${(k)dcc_CONTENT_TYPE[${option_type[2]}]} ]; then
    printf "invalid type\n${commandUsages[${subCommand}]}" ${(k)commandUsages[${subCommand}]}
    printf "  --type\t(%s) [default: all].\n" ${(kj: | :)dcc_CONTENT_TYPE}
    exit
  fi
  if [ -z  ${(k)dcc_CONTENT_STATUS[${option_status[2]}]} ]; then
    printf "invalid type\n${commandUsages[${subCommand}]}" ${(k)commandUsages[${subCommand}]}
    printf "  --status\t(%s) [default: current].\n" ${(kj: | :)dcc_CONTENT_STATUS}
    exit
  fi
  if [ ${#option_column[@]} -gt 6 ]; then
    printf "maximum num of --column options exceeded\n${commandUsages[${subCommand}]}" ${(k)commandUsages[${subCommand}]}
    exit
  fi
  for opt column in $option_column; do
    if [ -z ${(k)dcc_SPACE_AVAILABLE_KEYS[${column}]} ]; then
      printf "bad column\n${commandUsages[${subCommand}]}" ${(k)commandUsages[${subCommand}]}
      exit
    else
      option_column_headers+=",${(k)dcc_SPACE_AVAILABLE_KEYS[${column}]}"
    fi
  done
  # Pre-loop statements
  case $subCommand in
    "csv")
      if [ ${#option_column[@]} -eq 0 ]; then
        printf "spaceKey,contentId,status,title,type\n"
      else
        printf "spaceKey,contentId%s\n" $option_column_headers
      fi
      ;;
    "count")
      integer recordCount=0
      integer sum_recordCount=0
      printf "spaceKey,count\n"
      ;;
  esac
  # Main loop
  integer -r dc_LIMIT=${(v)dc_LIM[Max]}
  for Id Name in ${(kv)option_Array_Id_Name}; do
    integer dc_STARTINDEX=0
    integer dc_SIZE=$dc_LIMIT
    while [ $dc_SIZE -eq $dc_LIMIT ]; do
      curl_command="curl -i -s -X GET --url \"${dc_API_CNFL}content?limit=${dc_LIMIT}&start=${dc_STARTINDEX}${(v)dcc_CONTENT_TYPE[${option_type[2]}]}${(v)dcc_CONTENT_STATUS[${option_type[2]}]}&spaceKey=${Id}\" -H \"${aHA_JSON}\" -H \"${aHAB_CNFL}\""
      if [ -v flag_verbose ]; then
        echo $curl_command
      fi
      dc_HTTP_PARSE "`eval $curl_command`"
      dc_SIZE=`echo ${dc_JSON_STRING} | jq '.size'`
      case $subCommand in
        "count")
          recordCount+=`echo ${dc_JSON_STRING} | jq '.size'`
          ;;
        "json")
          echo $dc_JSON_STRING | jq
          ;;
        "csv")
          if [ ${#option_column[@]} -eq 0 ]; then
            echo $dc_JSON_STRING | jq -r --arg spaceKey ${Id} '.results[] | [ $spaceKey, (.id|tonumber), .status, .title, .type ] | @csv'
          fi
          if [ ${#option_column[@]} -eq 2 ]; then
            echo $dc_JSON_STRING | jq -r --arg spaceKey ${Id} --arg key1 ${option_column[2]} '.results[] | [ $spaceKey, (.id|tonumber), .[$key1] ] | @csv'
          fi
          if [ ${#option_column[@]} -eq 4 ]; then
            echo $dc_JSON_STRING | jq -r --arg spaceKey ${Id} --arg key1 ${option_column[2]} --arg key2 ${option_column[4]} '.results[] | [ $spaceKey, (.id|tonumber), .[$key1], .[$key2] ] | @csv'
          fi
          if [ ${#option_column[@]} -eq 6 ]; then
            echo $dc_JSON_STRING | jq -r --arg spaceKey ${Id} --arg key1 ${option_column[2]} --arg key2 ${option_column[4]} --arg key3 ${option_column[6]} '.results[] | [ $spaceKey, (.id|tonumber), .[$key1], .[$key2], .[$key3] ] | @csv'
          fi
          ;;
      esac
      dc_STARTINDEX+=$dc_LIMIT
    done
    case $subCommand in
      "count")
        printf "%s,%u\n" $Id recordCount
        sum_recordCount+=$recordCount
        recordCount=0
      ;;
    esac
  done
  # Post-loop statements
  case $subCommand in
    "count")
      printf ",%u\n" $sum_recordCount
      ;;
  esac
  exit
fi

case ${1:l} in
  "delete")
    subCommand=${1:l}
    shift
    typeset -a option_status=("--status" "current")
    zmodload zsh/zutil
    zparseopts -D -F -K {v,-verbose}=flag_verbose -pageId+:=option_id -status:=option_status
    if [ $? -gt 0 ]; then
      printf ${commandUsages[${subCommand}]} ${(k)commandUsages[${subCommand}]}
      exit
    fi
    # validate options_type
    if [ -z  ${(k)dcc_CONTENT_STATUS[${option_status[2]}]} ]; then
      printf "invalid status\n${commandUsages[${subCommand}]}" ${(k)commandUsages[${subCommand}]}
      printf "  --status\t(%s) [default: current].\n" ${(kj: | :)dcc_CONTENT_STATUS}
      exit
    fi
    # populate array
    typeset -a pageIds
    for opt id in $option_id; do
      pageIds+=("${id}")
    done
     # also check STDIN
    if [ ! -z $dc_STDIN ]; then
      for id in $dc_STDIN; do
        pageIds+=("${id}")
      done
    fi
    if [ ${#pageIds} -eq 0 ]; then
      printf "--pageId option is mandatory\n${commandUsages[${subCommand}]}" ${(k)commandUsages[${subCommand}]}
      exit
    fi
    # Main delete loop
    printf "pageId,title,result\n"
    for Id in ${pageIds}; do
      curl_command="curl -i -s -X GET --url \"${dc_API_CNFL}content/${Id}?${(v)dcc_CONTENT_STATUS[${option_status[2]}]}\" -H \"${aHA_JSON}\" -H \"${aHAB_CNFL}\""
      if [ -v flag_verbose ]; then
        echo $curl_command
      fi      
      dc_HTTP_PARSE "`eval $curl_command`"
      title=`echo $dc_JSON_STRING | jq -r '.title'`
      curl_command="curl -i -s -X DELETE --url \"${dc_API_CNFL}content/${Id}?${(v)dcc_CONTENT_STATUS[${option_status[2]}]}\" -H \"${aHA_JSON}\" -H \"${aHAB_CNFL}\""
      if [ -v flag_verbose ]; then
        echo $curl_command
      fi
      dc_HTTP_PARSE "`eval $curl_command`"
      if [ $dc_HTTP_RETURN_CODE -eq 204 ]; then
        case ${(k)dcc_CONTENT_STATUS[${option_status[2]}]} in
          "current")
            http_response="trashed"
            ;;
          "trashed")
            http_response="purged"
            ;;
        esac
      else
        http_response=$dc_HTTP_RETURN_CODE
      fi
      printf "%u,%s,%s\n" $Id $title $http_response
    done
    ;;
  "create")
    subCommand=${1:l}
    shift
    typeset -a option_status=("--status" "current")
    zmodload zsh/zutil
    zparseopts -D -F -K {v,-verbose}=flag_verbose -parentPageId:=option_id -spaceKey:=option_spacekey -title:=option_title -status:=option_status
    if [ $? -gt 0 ]; then
      printf ${commandUsages[${subCommand}]} ${(k)commandUsages[${subCommand}]}
      exit
    fi
    # validate options
    if [ -z  ${(k)dcc_CONTENT_STATUS[${option_status[2]}]} ]; then
      printf "invalid status\n${commandUsages[${subCommand}]}" ${(k)commandUsages[${subCommand}]}
      printf "  --status\t(%s) [default: current].\n" ${(kj: | :)dcc_CONTENT_STATUS}
      exit
    fi
    if [ -z  ${option_title[2]} ]; then
      printf "option --title\n${commandUsages[${subCommand}]}" ${(k)commandUsages[${subCommand}]}
      exit
    fi
    if [ -z  ${option_spacekey[2]} ]; then
      printf "option --spaceKey\n${commandUsages[${subCommand}]}" ${(k)commandUsages[${subCommand}]}
      exit
    fi
    if [ -z  ${option_id[2]} ]; then
      printf "option --parentPageId\n${commandUsages[${subCommand}]}" ${(k)commandUsages[${subCommand}]}
      exit
    fi
    # check STDIN
    if [ ! -z $dc_STDIN ]; then
      storage_content=$dc_STDIN
    else
      if [ -f $option_title[2] ]; then
        storage_content=`cat ${option_title[2]}`
      else
        storage_content="<ac:structured-macro ac:name=\\\"children\\\"/>"
      fi
    fi
    # create page
    curl_command="curl -i -s -X POST --url \"${dc_API_CNFL}content\" --data-raw '{ \"title\": \"${option_title[2]}\", \"type\": \"page\", \"space\": { \"key\": \"${option_spacekey[2]}\"}, \"status\": \"${option_status[2]}\", \"ancestors\": [ { \"id\": \"${option_id[2]}\" } ], \"body\": { \"storage\": { \"value\": \"${storage_content}\", \"representation\": \"storage\" } } }' -H \"${aHA_JSON}\" -H \"${aHCT_JSON}\" -H \"${aHAB_CNFL}\""
    if [ -v flag_verbose ]; then
      echo $curl_command
    fi      
    dc_HTTP_PARSE "`eval $curl_command`"
    if [ $dc_HTTP_RETURN_CODE -eq 200 ]; then
      echo $dc_JSON_STRING | jq -r '.id'
    else
      echo $dc_HTTP_RETURN_CODE
    fi

    ;;
  "get")
    subCommand=${1:l}
    shift
    typeset -a option_status=("--status" "current")
    zmodload zsh/zutil
    zparseopts -D -F -K {v,-verbose}=flag_verbose -pageId:=option_id -status:=option_status -version:=option_version
    if [ $? -gt 0 ]; then
      printf ${commandUsages[${subCommand}]} ${(k)commandUsages[${subCommand}]}
      exit
    fi
    # validate options
    if [ -z  ${(k)dcc_CONTENT_STATUS[${option_status[2]}]} ]; then
      printf "invalid status\n${commandUsages[${subCommand}]}" ${(k)commandUsages[${subCommand}]}
      printf "  --status\t(%s) [default: current].\n" ${(kj: | :)dcc_CONTENT_STATUS}
      exit
    fi
    if [ ! -z  ${option_version[2]} ]; then
      if [[ ! ${option_version[2]} =~ '^[0-9]+$' ]]; then
        printf "--version is not a number\n${commandUsages[${subCommand}]}" ${(k)commandUsages[${subCommand}]}
        exit
      fi
    fi
    if [[ ! ${option_id[2]} =~ '^[0-9]+$' ]]; then
      printf "--pageId is not a number\n${commandUsages[${subCommand}]}" ${(k)commandUsages[${subCommand}]}
      exit
    fi
    # get Page by Id
    curl_command="curl -i -s -X GET --url \"${dc_API_CNFL}content/${option_id[2]}?expand=body.storage,version${(v)dcc_CONTENT_STATUS[${option_status[2]}]}\" -H \"${aHA_JSON}\" -H \"${aHCT_JSON}\" -H \"${aHAB_CNFL}\"" 
    if [ -v flag_verbose ]; then
      echo $curl_command
    fi      
    dc_HTTP_PARSE "`eval $curl_command`"
    if [ $dc_HTTP_RETURN_CODE -eq 200 ]; then
      echo $dc_JSON_STRING | jq -r '.body.storage.value'
    else
      echo $dc_HTTP_RETURN_CODE
    fi
    ;;
  "showurl")
    subCommand=${1:l}
    shift
    zmodload zsh/zutil
    zparseopts -D -F -K -pageId:=option_id -status:=option_status -version:=option_version
    if [ $? -gt 0 ]; then
      printf ${commandUsages[${subCommand}]} ${(k)commandUsages[${subCommand}]}
      exit
    fi
    printf "%spages/viewpage.action?pageId=%s\n" $dc_BASE_URL_CNFL $option_id[2]
    ;;
  "help")
    ac_Print_Help
    ;;

  *)
    ac_Print_Help
    ;;
esac
